name: Deploy

on:
  workflow_call:
    inputs:
      terraform_dir:
        description: "Path to Terraform configs"
        required: true
        type: string
      ansible_dir:
        description: "Path to Ansible playbooks"
        required: true
        type: string
      inventory_file:
        description: "Ansible inventory file path"
        required: true
        type: string
      image_tag:
        description: "Docker image tag to use in deployment"
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      DEPLOY_SSH_KEY:
        required: true
      BACKEND_ENV_B64:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_IN_AUTOMATION: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.0"
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ inputs.terraform_dir }}
        run: terraform init

      - name: Terraform Plan
        id: tf-plan
        working-directory: ${{ inputs.terraform_dir }}
        run: |
          terraform plan -out=tfplan > plan_output.txt
          if grep -q "No changes. Infrastructure is up-to-date." plan_output.txt; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Show Terraform Plan
        working-directory: ${{ inputs.terraform_dir }}
        run: cat plan_output.txt

      - name: Terraform Apply (only if changes)
        if: steps.tf-plan.outputs.changes == 'true'
        working-directory: ${{ inputs.terraform_dir }}
        run: terraform apply -auto-approve tfplan

      - name: Terraform Refresh (only if no apply)
        if: steps.tf-plan.outputs.changes == 'false'
        working-directory: ${{ inputs.terraform_dir }}
        run: terraform refresh

      - name: Get Terraform Output (Instance IP)
        id: tf-output
        working-directory: ${{ inputs.terraform_dir }}
        run: |
          INSTANCE_IP=$(terraform output -raw instance_public_ip)
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "Extracted IP: $INSTANCE_IP"

      - name: Set up Python (for Ansible)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Write SSH key to file
        run: |
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > private_key.pem
          chmod 400 private_key.pem

      - name: Add instance to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ steps.tf-output.outputs.INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Overwrite Ansible inventory with Terraform IP
        working-directory: ${{ inputs.ansible_dir }}
        run: |
          echo "[all]" > ${{ inputs.inventory_file }}
          echo "${{ steps.tf-output.outputs.INSTANCE_IP }}" >> ${{ inputs.inventory_file }}

      - name: Run Ansible playbook to deploy containers
        working-directory: ${{ inputs.ansible_dir }}
        run: |
          ansible-playbook -i ${{ inputs.inventory_file }} playbook.yml \
            --private-key ../../private_key.pem -u ubuntu \
            --extra-vars "backend_env_b64=${{ secrets.BACKEND_ENV_B64 }} image_tag=${{ inputs.image_tag }} docker_username=${{ secrets.DOCKER_USERNAME }}"
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: "http://${{ steps.tf-output.outputs.INSTANCE_IP }}"
          fail_action: false

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html
