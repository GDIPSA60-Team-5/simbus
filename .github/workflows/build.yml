name: Build
on:
  workflow_call:
    inputs:
      folder:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      FOLDER: ${{ inputs.folder }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up environment and build $FOLDER
        run: |
          cd $FOLDER
          case "$FOLDER" in
            next-frontend)
              # Node setup
              echo "Setting up Node.js"
              ;;
            spring-backend)
              echo "Setting up Java"
              ;;
            android-kotlin)
              echo "Setting up Java for Android"
              ;;
            llm-backend)
              echo "Setting up Python"
              ;;
            *)
              echo "Unknown folder $FOLDER"
              exit 1
              ;;
          esac

      # Setup environments per folder

      - name: Setup Node.js (next-frontend)
        if: env.FOLDER == 'next-frontend'
        uses: actions/setup-node@v3
        with:
          cache: npm

      - name: Setup Java (spring-backend & android-kotlin)
        if: env.FOLDER == 'spring-backend' || env.FOLDER == 'android-kotlin'
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Setup Python (llm-backend)
        if: env.FOLDER == 'llm-backend'
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
          cache: pip

      # Build and SonarQube scan per folder

      - name: Build and SonarQube scan (next-frontend)
        if: env.FOLDER == 'next-frontend'
        run: |
          cd $FOLDER
          npm ci
          npm run build
          npx sonar-scanner \
            -Dsonar.projectKey=your_project_key_next_frontend \
            -Dsonar.organization=your_organization \
            -Dsonar.sources=. \
            -Dsonar.login=$SONAR_TOKEN

      - name: Build and SonarQube scan (spring-backend)
        if: env.FOLDER == 'spring-backend'
        run: |
          cd $FOLDER
          ./mvnw clean verify -DskipTests
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=your_project_key_spring_backend \
            -Dsonar.organization=your_organization \
            -Dsonar.login=$SONAR_TOKEN

      - name: Build and SonarQube scan (android-kotlin)
        if: env.FOLDER == 'android-kotlin'
        run: |
          cd $FOLDER
          ./gradlew assembleRelease
          ./gradlew sonarqube \
            -Dsonar.projectKey=your_project_key_android \
            -Dsonar.organization=your_organization \
            -Dsonar.login=$SONAR_TOKEN

      - name: Build and SonarQube scan (llm-backend)
        if: env.FOLDER == 'llm-backend'
        run: |
          cd $FOLDER
          pip install -r requirements.txt
          # Add build commands if needed
          sonar-scanner \
            -Dsonar.projectKey=your_project_key_llm \
            -Dsonar.organization=your_organization \
            -Dsonar.sources=. \
            -Dsonar.login=$SONAR_TOKEN
