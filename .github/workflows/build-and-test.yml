name: Build, Test & Report

on:
  workflow_call:
    inputs:
      folder:
        required: true
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      folder: ${{ steps.validate.outputs.folder }}
    steps:
      - name: ✅ Validate Folder
        id: validate
        run: |
          case "${{ inputs.folder }}" in
            next-frontend|spring-backend|android-kotlin|llm-backend)
              echo "folder=${{ inputs.folder }}" >> "$GITHUB_OUTPUT"
              ;;
            *)
              echo "Invalid folder: ${{ inputs.folder }}"
              exit 1
              ;;
          esac

  next-frontend:
    if: needs.validate.outputs.folder == 'next-frontend'
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: next-frontend/package-lock.json

      - name: 📥 Install Dependencies
        run: |
          cd next-frontend
          npm ci

      - name: 🧪 Run Tests
        run: |
          cd next-frontend
          npm test -- --coverage --watchAll=false --ci

      - name: 🏗️ Build Application
        run: |
          cd next-frontend
          npm run build

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: GDIPSA60-Team-5/simbus
          flags: backend

      - name: 📈 Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Next.js Tests
          path: next-frontend/test-results.xml
          reporter: jest-junit

  spring-backend:
    if: needs.validate.outputs.folder == 'spring-backend'
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: 🧪 Run Tests with Coverage
        run: |
          cd spring-backend
          chmod +x ./mvnw
          ./mvnw clean test jacoco:report

      - name: 🏗️ Package Application
        run: |
          cd spring-backend
          ./mvnw package -DskipTests

      - name: 📊 Generate Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Spring Boot Tests
          path: spring-backend/target/surefire-reports/*.xml
          reporter: java-junit

      - name: 📈 Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: spring-backend/target/site/jacoco/jacoco.xml
          flags: backend
          name: spring-backend-coverage

  android-kotlin:
    if: needs.validate.outputs.folder == 'android-kotlin-later'
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Create local.properties file
        run: echo "map_api_key=${{ secrets.MAP_API_KEY }}" > android-kotlin/local.properties

      - name: 🤖 Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Make gradlew executable
        run: chmod +x android-kotlin/gradlew

      - name: 🧪 Run Unit Tests
        run: |
          cd android-kotlin
          ./gradlew testDebugUnitTest

      - name: 🏗️ Build Debug APK
        run: |
          cd android-kotlin
          ./gradlew assembleDebug

      - name: 🏗️ Build Release APK
        run: |
          cd android-kotlin
          ./gradlew assembleRelease

      - name: 📊 Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Android Unit Tests
          path: android-kotlin/app/build/test-results/testDebugUnitTest/*.xml
          reporter: java-junit

      - name: 📈 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: GDIPSA60-Team-5/simbus
          directory: android-kotlin/app/build/reports/jacoco/testDebugUnitTestCoverage
          flags: android

      - name: 📱 Upload APK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: |
            android-kotlin/app/build/outputs/apk/debug/*.apk
            android-kotlin/app/build/outputs/apk/release/*.apk

  llm-backend:
    if: needs.validate.outputs.folder == 'llm-backend'
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: pip

      - name: 📥 Install Dependencies
        run: |
          cd llm-backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist

      - name: 🧪 Run Tests with Coverage
        run: |
          cd llm-backend
          pytest --cov=. --cov-report=xml --cov-report=html --junitxml=test-results.xml -v

      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: GDIPSA60-Team-5/simbus
          directory: llm-backend
          flags: llm-backend

      - name: 📈 Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Python Tests
          path: llm-backend/test-results.xml
          reporter: python-pytest

  # Consolidated reporting job
  report-summary:
    if: always()
    needs:
      [validate, next-frontend, spring-backend, android-kotlin, llm-backend]
    runs-on: ubuntu-latest
    steps:
      - name: 📋 Build Summary
        run: |
          echo "## 🚀 Build & Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.next-frontend.result }}" != "skipped" ]]; then
            status="${{ needs.next-frontend.result }}"
            emoji="✅"; [[ "$status" != "success" ]] && emoji="❌"
            echo "| Next.js Frontend | $emoji $status | Build and tests completed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.spring-backend.result }}" != "skipped" ]]; then
            status="${{ needs.spring-backend.result }}"
            emoji="✅"; [[ "$status" != "success" ]] && emoji="❌"
            echo "| Spring Backend | $emoji $status | Tests and build completed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.android-kotlin.result }}" != "skipped" ]]; then
            status="${{ needs.android-kotlin.result }}"
            emoji="✅"; [[ "$status" != "success" ]] && emoji="❌"
            echo "| Android Kotlin | $emoji $status | Unit tests and APK build completed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.llm-backend.result }}" != "skipped" ]]; then
            status="${{ needs.llm-backend.result }}"
            emoji="✅"; [[ "$status" != "success" ]] && emoji="❌"
            echo "| LLM Backend | $emoji $status | Tests and coverage completed |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Reports Available" >> $GITHUB_STEP_SUMMARY
          echo "- 📈 **Test Results**: Check the Actions summary for detailed test reports" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Code Coverage**: Available on Codecov dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 **Security Reports**: Uploaded as artifacts (for Python backend)" >> $GITHUB_STEP_SUMMARY
